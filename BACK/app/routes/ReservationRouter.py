from fastapi import APIRouter, HTTPException, Depends
from sqlmodel import Session, select
from database import get_db
from app.models.Reservations import Reservations
from app.models.Evenements import Evenements
from app.models.Utilisateurs import User
from app.schemas.ReservationSchema import ReservationCreate
from app.dependencies import get_current_user
from typing import List

router = APIRouter()

# ‚úÖ 1Ô∏è‚É£ R√©server un √©v√©nement
@router.post("/", response_model=Reservations)
def create_reservation(
    reservation: ReservationCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)  # üîí Seul un utilisateur connect√© peut r√©server
):
    event = db.get(Evenements, reservation.evenement_id)
    if not event:
        raise HTTPException(status_code=404, detail="√âv√©nement non trouv√©")

    # V√©rifier si l'√©v√©nement est complet
    existing_reservations = db.exec(
        select(Reservations).where(Reservations.evenement_id == event.id)
    ).all()

    if len(existing_reservations) >= event.capacite:
        raise HTTPException(status_code=400, detail="L'√©v√©nement est complet")

    new_reservation = Reservations(
        utilisateur_id=current_user.id,
        evenement_id=reservation.evenement_id,
        date_de_reservation=reservation.date_de_reservation,
        status="confirm√©e"  # Par d√©faut, la r√©servation est confirm√©e
    )

    db.add(new_reservation)
    db.commit()
    db.refresh(new_reservation)
    return new_reservation


# ‚úÖ 2Ô∏è‚É£ Lister toutes les r√©servations (Admin uniquement)
@router.get("/", response_model=List[Reservations])
def list_reservations(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    # Seul un admin peut voir toutes les r√©servations
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="Acc√®s interdit")

    return db.exec(select(Reservations)).all()


# ‚úÖ 3Ô∏è‚É£ Lister les r√©servations de l'utilisateur connect√©
@router.get("/me", response_model=List[Reservations])
def list_my_reservations(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    return db.exec(
        select(Reservations).where(Reservations.utilisateur_id == current_user.id)
    ).all()


# ‚úÖ 4Ô∏è‚É£ Supprimer une r√©servation (seul le cr√©ateur peut la supprimer)
@router.delete("/{reservation_id}")
def delete_reservation(
    reservation_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    reservation = db.get(Reservations, reservation_id)
    if not reservation:
        raise HTTPException(status_code=404, detail="R√©servation non trouv√©e")

    if reservation.utilisateur_id != current_user.id:
        raise HTTPException(status_code=403, detail="Vous ne pouvez supprimer que vos propres r√©servations")

    db.delete(reservation)
    db.commit()
    return {"message": "R√©servation annul√©e avec succ√®s"}
